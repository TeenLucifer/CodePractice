/*------------------------------------------------------------------------------
 * @file    REAL_QUESTION.CPP
 * @author  t-rex 
 * @date    2023/08/14 08:42:08
 * @brief   机试真题收集.
 * -----------------------------------------------------------------------------
 * @attention 
 
 * THE EXISTING FIRMWARE IS ONLY FOR REFERENCE, WHICH IS DESIGNED TO PROVIDE 
 * CUSTOMERS WITH CODING INFORMATION ABOUT THEIR PRODUCTS SO THEY CAN SAVE 
 * TIME. THEREFORE, MINDMOTION SHALL NOT BE LIABLE FOR ANY DIRECT, INDIRECT OR 
 * CONSEQUENTIAL DAMAGES ABOUT ANY CLAIMS ARISING OUT OF THE CONTENT OF SUCH 
 * HARDWARE AND/OR THE USE OF THE CODING INFORMATION CONTAINED HEREIN IN 
 * CONNECTION WITH PRODUCTS MADE BY CUSTOMERS. 
 * 
 * <H2><CENTER>&COPY; COPYRIGHT MINDMOTION </CENTER></H2> 
------------------------------------------------------------------------------*/

/* Define to prevent recursive inclusion  ------------------------------------*/
#include "code_caprice.h"
#define _REAL_QUESTION_C_

/* Files includes  -----------------------------------------------------------*/
#include "real_question.h"

/*----------------------------------------------------------------------------*/

/*Dji 2023/08/13*/
/*
解决无人机飞行规划问题
* 给定一个环形路线实施无人机作业，在路线上有n个充电站，编号0,...,n-1，i号充电站可以给无人机提供charge[i]单位的电量。无人机从i号充电站出发作业，并飞往i+1号充电站需要小号cost[i]单位的电量。
* 假设无人机可以无限量充电。无人机从其中一个充电站完成充电出发（充电前初始电量为空），给定正整数数组charge和cost，如果无人机可以顺时针绕环形路线一周完成作业并返回出发充电站，则返回出发时充电站编号i，否则返回-1
* 注：为简化问题，如果存在解，输入数据可保证解唯一。测试用例输入格式为（length of charge, charge, lengh of cost, cost）
* e.g.1
* 输入：length of charge = 5, charge = [1, 2, 3, 4, 5], length of cost = 5, cost = [3, 4, 5, 1, 2]
* 输出：3
* 解析：从3号充电站出发，电量为4；飞到4号充电站，电量为4-1+5=8；飞到0号充电站，电量为8-2+1=7；飞到1号充电站，电量为7-3+2=6；飞到2号充电站，电量为6-4+3=5；飞回到3号充电站，电量5正好满足cost[2]
* e.g.2
* 输入：length of charge = 3, charge = [2, 3, 4], length of cost = 3, cost = [3, 4, 3]
* 输出：-1
* 解析：从0号或者1号充电站出发，得到的电量都不能满足飞到下一站的电量。从2号充电站出发，电量为4；飞到0号充电站，电量为4-3+2=3；飞到1号充电站，电量为3-3+3=3；但是无法返回2号充电站，cost[1]>3
* 输入描述：每个充电站提供的电量数组长度，数组内容，从i号充电站飞到i+1号充电站需要消耗的电量数组长度，数组内容
* 输出描述：出发充电站编号
* 样例输入：
* 5
* 1 2 3 4 5
* 5
* 3 4 5 1 2
* 样例输出：
* 3
*/
void RealQuestion::question1()
{

}

/*
* 多个航拍点，为了规划路线，提前了解了不同航拍点之间的连通性和距离，同时确认了每个航拍点充电桩的充电速度
* 电动车满电电量可以形式距离为dis，单位km，该电动车在每形式1km消耗1单位电量，且耗时1min，一共N个航拍点，每个航拍点都有充电桩，使用二维数组paths标识两个航拍点的双向连通性和距离：[[航拍点编号，相邻航拍点编号，两个航拍点的距离]]，示例：[[0,1,3],[0,2,2]...]，其中[0,1,3]表示编号为0的航拍点充电1单位耗时2分钟，10表示编号为1的航拍点充电1单位耗时10m分钟
* 当前在航拍点a，且电动车无电，请问最少花费多少分钟数从所在的航拍点a抵达航拍点b
* 输入描述：
* 1. paths: 标识两个航拍点的双向连通性和距离
* (先输入航拍点距离的二维数组长度，比如6 3，表示6组数据，每组3个数值。再跟具体的数组内容)
* 2. dis: 电动车满电行驶里程
* 3. a: 航拍点a的编号
* 4. b: 航拍点b的编号
* 5. charge: 标识每个航拍点充1单位电花费的分钟数
* (先输入充电的数组长度，比如5.再跟数组内容，比如4 1 1 3 2)
* 输出描述：
* 花费最少的分钟数
* 样例输入：
* 6 3
* 0 4 2
* 4 3 5
* 3 0 5
* 0 1 5
* 3 2 4
* 1 2 8
* 8
* 0
* 2
* 5
* 4 1 1 3 2
* 样例输出：
* 38
*/

/*米哈游2023/08/13*/
/*
*前情提要：昨天是米小游生日，但是她又错过了爱莉键盘，她许了个生日愿望想让奥托主教再带她冲一次虚数之树，为世界上所有的美好而战！
* 米小游和奥托主教冲虚树之树后，掉入量子之海里失散了，但她不如道奥托主教在哪里，所以她决定先去寻找月下，再让月下带着她一起去找奥托主教。
已知量子之海可以认为是一个n* m的矩阵，左下角坐标为（1, 1），右上角坐标是（n，m）。米小游每次可以走到相邻的坐标，即当|x1 - x2|+|y1 - y2|=1时，米小游可以从（x1,y1）走到（x2,y2）。
* 另外，量子之海有一个特殊的特性，其左边界和右边界是相邻的，上边界和下边界也是相邻的。也就是说，（x,1）和（x,m）相邻，（1,y）和（n，y）也是相邻的。
* 现在按顺序给定了米小游、月下和奥托主教的坐标，请你判断米小游最少需要走几步。
* 输入描述：
*第一行输入两个整数 n，m（1≤n，m≤ 10^9）表示量子之海大小。
*接下来三行，每行输入两个整数
x（1≤x≤n），y（1≤y≤m）表示按顺序给出的点的坐标。
* 输出描述：
* 输出一个整数标识最少需要走的步数
* e.g. 1
* 输入：
* 3 3
* 1 1 
* 3 3
* 1 3
* 输出：
* 3
* 说明：
* 米小游可以先从（1，1）走到（3，1）走到（3，3），走2步。
* 然后再从（3，3）走到（1，3），走1步
* 因此总共走了3步
*/

/*
* 米小游拿到了一棵有根树，树上有n个节点，根节点编号为1，所有边的长度均为1。
* 米小游每一次操作可以将一个新叶子节点接在原来的一个叶子上，新加的边的边长度也是1。米小游可以进行任意次操作。
* 她想知道，操作结束后，与根节点的距离不超过k的节点个数的最大值是多少。
* • 输入描述
* 第一行输入两个整数n（1≤n≤10^5），K（0≤k≤10^9）
* 接下来n-1行，每行输入两个整数u,v(1<=u,v<=n）表示节点u和节点v之间有一条边。
* 输出描述
* 输出一个整数表示答案。
* 示例1
* 输入输出示例仅供调试，后台判题数据一股不包含示例
* 输入：
* 4 2
* 1 2
* 1 3
* 2 4
* 输出：
* 5
*/

/*
* 米小游买了一本书，名字叫《舰舰的奇妙冒险》。她每天会从第l_i页看到第r_i页，她想知道她每天看的部分有多少页是以前没看过的。
* 输入描述：
* 第一行输入两个整数 n，q（1≤n,q≤10^5）分别表示书的总页数、看书天数。
* 接下来q行，每行两个整数l_i,r_i（1≤l_i<=r_i<=n）。
* 输出描述：
* 输出q行，每行输出一个整数表示答案。
* 示例1：
* 输入输出示例仅供调试，后台判题数据一般不包含示例
* 输入
* 3 2
* 1 2
* 2 3
* 输出
* 2
* 1
* 说明：
* 第一天：米小游看了1、2页，其中1、2页之前都没看过，所以答案为2
* 第二天：米小游看了2、3页，其中第2页之前看过，第3页之前没看过，所以答案为1
*/